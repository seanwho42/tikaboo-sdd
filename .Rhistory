filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(c(0,12)) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(c(0,10)) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(c(0,13)) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(c(0,15)) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(c(0,13)) +
labs(x='Distance (m)', y='Count')
?ylim
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered), bin_width = 2) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered), bin_width = 1) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered), bin_width = 10) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered), binwidth = 1) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered), binwidth = 3) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered), binwidth = 20) +
geom_histogram() +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram(binwidth = 20) +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram(binwidth = 2) +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram(binwidth = 1) +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram(binwidth = 1) +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
# ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram(binwidth = 5) +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
# ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram(binwidth = 3) +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
# ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram(binwidth = 2) +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
# ylim(0,13) +
labs(x='Distance (m)', y='Count')
trees_distances %>%
filter(selfed, !potential_clones_filtered)%>%
ggplot(aes(x = distance, fill=potential_clones_filtered)) +
geom_histogram(binwidth = 2) +
# geom_density(color = "red") +
theme_classic() +
guides(fill='none') +
scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12)) +
# ylim(0,13) +
labs(x='Distance (m)', y='Count')
max_min_distance %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='thistle2') +
geom_density(color='red') +
theme_classic() +
facet_wrap(~max_min, rows = 2)
max_min_distance %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='thistle2') +
geom_density(color='red') +
theme_classic() +
facet_wrap(~max_min, cols = 1)
max_min_distance %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='thistle2') +
geom_density(color='red') +
theme_classic() +
facet_wrap(~max_min, ncols = 1)
max_min_distance %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='thistle2') +
geom_density(color='red') +
theme_classic() +
facet_wrap(~max_min)
max_min_distance %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='thistle2') +
geom_density(color='red') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
mutate(max_min = as.factor(max_min, levels = c('Min', 'Max')))
max_min_distance %>%
mutate(max_min = as.factor(max_min, levels = c('Min', 'Max')))
max_min_distance %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max')))
max_min_distance %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max')))
max_min_distance %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='thistle2') +
geom_density(color='red') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered)
max_min_distance %>%
filter(!potential_clones_filtered)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='thistle2') +
geom_density(color='red') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='#900') +
geom_density(color='red') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='#099') +
geom_density(color='red') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='#099') +
geom_density(color='blue') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='#099') +
geom_density(color='#09c') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='#0c9') +
geom_density(color='#09c') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='#0ff') +
geom_density(color='#09c') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='#0c0') +
geom_density(color='#09c') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='#0d0') +
geom_density(color='#09c') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='#dd0') +
geom_density(color='#09c') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='thistle2') +
geom_density(color='#09c') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
geom_histogram(fill='thistle2') +
geom_density(color='red') +
theme_classic() +
facet_wrap(~max_min, ncol = 1)
max_min_distance %>%
filter(!potential_clones_filtered) %>%
mutate(max_min = factor(max_min, levels = c('Min', 'Max'))) %>%
ggplot(aes(x=distance, y=after_stat(density))) +
# todo: find better colors
geom_histogram(fill='thistle2') +
geom_density(color='red') +
theme_classic() +
facet_wrap(~max_min, ncol = 1) +
labs(x='Distance (m)', y = 'Density')
trees_distances %>%
filter(selfed, !potential_clones_filtered) %>%
summary()
cluster_outlier_palette
for (s in unique(spatial_species$species)) {
s_species = spatial_species %>% filter(species == s)
# fixing the colors because not all clusters/outlier classifications are represented for each species
if (s == 'y. Jaegeriana') {
cluster_outlier_palette = c("#E69F00", "#F0E442", "#D55E00", "#CC79A7", "#999999")
} else if (s == 'Hybrid') {
cluster_outlier_palette = c("#E69F00", "#F0E442", "#D55E00", "#999999")
} else {
cluster_outlier_palette = c("#E69F00", "#F0E442", "#999999")
}
print(s)
print(s_species)
print(
ggmap(morpho_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_point(s_species,
mapping=aes(x=long, y=lat, color=Ii),
size=1) +
facet_wrap(~species, nrow=3) +
theme_classic() +
labs(color = 'Cluster/Outlier type') +
scale_color_discrete(type=cluster_outlier_palette)
)
}
cluster_outlier_palette = c("#E69F00", "#F0E442", "#D55E00", "#CC79A7", "#999999")
ggmap(morpho_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_point(spatial_species,
mapping=aes(x=long, y=lat, color=Ii),
size=.7) +
labs(color = 'Cluster/Outlier type')
ggmap(morpho_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_point(spatial_species,
mapping=aes(x=long, y=lat, color=Ii),
size=.7) +
labs(color = 'Cluster/Outlier type') +
scale_color_discrete(type=cluster_outlier_palette)
for
for
for (s in unique(spatial_species$species)) {
s_species = spatial_species %>% filter(species == s)
# fixing the colors because not all clusters/outlier classifications are represented for each species
if (s == 'y. Jaegeriana') {
cluster_outlier_palette = c("#E69F00", "#F0E442", "#D55E00", "#CC79A7", "#999999")
} else if (s == 'Hybrid') {
cluster_outlier_palette = c("#E69F00", "#F0E442", "#D55E00", "#999999")
} else {
cluster_outlier_palette = c("#E69F00", "#F0E442", "#999999")
}
print(s)
print(s_species)
print(
ggmap(morpho_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_point(s_species,
mapping=aes(x=long, y=lat, color=Ii),
size=1) +
facet_wrap(~species, nrow=3) +
theme_classic() +
labs(color = 'Cluster/Outlier type') +
scale_color_discrete(type=cluster_outlier_palette)
)
}
ggmap(morpho_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_point(spatial_species,
mapping=aes(x=long, y=lat, color=Ii),
size=.3)+
facet_wrap(~species, nrow=3)
ggmap(nw_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_point(spatial_species,
mapping=aes(x=long, y=lat, color=Ii),
size=1) +
labs(color = 'Cluster/Outlier type') +
scale_color_discrete(type=cluster_outlier_palette)
cluster_outlier_palette = c("#E69F00", "#F0E442", "#D55E00", "#CC79A7", "#999999")
ggmap(nw_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_point(spatial_species,
mapping=aes(x=long, y=lat, color=Ii),
size=1) +
labs(color = 'Cluster/Outlier type') +
scale_color_discrete(type=cluster_outlier_palette)
# Replace NA with "Not significant". This requires that the Ii factor be re-leveled
sf_morph_coords$Ii <- factor(sf_morph_coords$Ii, levels=c("High-High (Tall with tall nearby)","Low-Low (Short with short nearby)", "Low-High (Short with tall nearby)", "High-Low (Tall with short nearby)", "Not significant"))
cluster_outlier_palette = c("#E69F00", "#F0E442", "#D55E00", "#CC79A7", "#999999")
ggmap(morpho_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_point(spatial_species,
mapping=aes(x=long, y=lat, color=Ii),
size=.7) +
labs(color = 'Cluster/Outlier type') +
scale_color_discrete(type=cluster_outlier_palette)
species_coords = inner_join(coords, structure, by=join_by('Tree'=='tree')) %>%
select(Tree, X, Y, percent_brev_ave) %>%
mutate(
species = factor(case_when(
percent_brev_ave < 0.25 ~ 'y. Jaegeriana',
percent_brev_ave > 0.75 ~ 'y. Brevifolia',
.default = 'Hybrid'
), levels = c('y. Jaegeriana', 'Hybrid', 'y. Brevifolia'))
)
spatial_species = inner_join(sf_morph_coords %>% select(-geometry), species_coords, by=c('tree' = 'Tree'))
dim(spatial_species)
cluster_outlier_palette = c("#E69F00", "#F0E442", "#D55E00", "#CC79A7", "#999999")
ggmap(morpho_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_point(spatial_species,
mapping=aes(x=long, y=lat, color=Ii),
size=.7) +
labs(color = 'Cluster/Outlier type') +
scale_color_discrete(type=cluster_outlier_palette)
for
for (s in unique(spatial_species$species)) {
for (s in unique(spatial_species$species)) {
s_species = spatial_species %>% filter(species == s)
# fixing the colors because not all clusters/outlier classifications are represented for each species
if (s == 'y. Jaegeriana') {
cluster_outlier_palette = c("#E69F00", "#F0E442", "#D55E00", "#CC79A7", "#999999")
} else if (s == 'Hybrid') {
cluster_outlier_palette = c("#E69F00", "#F0E442", "#D55E00", "#999999")
} else {
cluster_outlier_palette = c("#E69F00", "#F0E442", "#999999")
}
print(s)
print(s_species)
print(
ggmap(morpho_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_point(s_species,
mapping=aes(x=long, y=lat, color=Ii),
size=1) +
facet_wrap(~species, nrow=3) +
theme_classic() +
labs(color = 'Cluster/Outlier type') +
scale_color_discrete(type=cluster_outlier_palette)
)
}
summary(spatial_species)
619.03315 - 197.22384
317.38193 - 26.64508
trees_distances %>%
filter(selfed == T) %>%
group_by(potential_clones_filtered) %>%
summarize(median = median(distance))
trees_distances %>%
filter(selfed == T) %>%
group_by(potential_clones_filtered) %>%
summarize(median = median(distance), mean = mean(distance), sd = sd(distance))
nrow(thresholded_filtered_parentage_lods)
nrow(thresholded_unfiltered_parentage_lods)
thresholded_filtered
pedigree_coords %>%
group_by(potential_clones_filtered) %>%
summarize(n = n(), mean = mean(distance), sd = sd(distance), median = median(distance))
pedigree_coords %>%
group_by(potential_clones_filtered) %>%
summarize(n = n(), mean = mean(distance), sd = sd(distance), median = median(distance))
pedigree_coords %>% filter(is.na(offspring_y))
trees_distances %>%
group_by(potential_clones_filtered) %>%
summarize(median_d = median(distance),
mean_d = mean(distance),
sd_d = sd(distance),
max_d = max(distance),
min_d = min(distance),
n = n())
MCi.df
View(structure)
View(structure)
